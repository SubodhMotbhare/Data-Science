summary(df)
#scaling the input variables
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
#KNN
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = True)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
install.packages("ISLR")
split<-sample.split(df_scaled, SplitRatio = 0.7)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = True)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
install.packages("ISLR")
?Smarket
df<-Smarket
View(df)
df = df[,2:9]
head(df)
str(df)
summary(df)
ling the input variables
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
#KNN
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
N
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
?Smarket
df<-Smarket
View(df)
df = df[,2:9]
head(df)
str(df)
summary(df)
#scaling the input variables
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
install.packages("caTools")
install.packages("caTools")
install.packages("class")
exit
?Smarket
df<-Smarket
View(df)
df = df[,2:9]
head(df)
str(df)
summary(df)
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
install.packages("caTools")
install.packages("class")
N
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
install.packages("ISLR")
install.packages("ISLR")
install.packages("caTools")
install.packages("class")
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
split<-sample.split(df_scaled, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
tr_data<-subset(df_scaled,split == F)
#KNN
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3, prob = TRUE)
head(pred)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
install.packages("ISLR")
setwd("D:Data Science Program")
#Exercise-1
data = read.csv("germination_csv.csv",header=TRUE)
# Q.1)
mean(data$germinated[data$Box=="Uncovered" & data$water_amt==4])
# Q.2)
median(data$germinated[data$Box=="Covered"])
# Q.3)
# a)
plot(data$water_amt, data$germinated, main="Germinated seeds vs Level of watering", xlab="Level of watering", ylab="Germinated seeds")
# b)
data$Box = factor(data$Box)
data$Box
plot(data$Box, data$germinated, main="Germinated seeds vs Covered or Uncovered", xlab="Box Types", ylab="Germinated seeds")
#Exercise-2
library(readxl)
wheat <- read_excel("wheat.xlsx")
wheat
wheat$State = factor(wheat$State)
plot(wheat$State, wheat$`2015 (Th. Tonnes)`, main="Wheat produced per State in 2015", xlab="States", ylab="Wheat produced")
plot(wheat$State, data$`2016 (th. Tonnes)`, main="Wheat produced per State in 2016", xlab="States", ylab="Wheat produced")
#Exercise-3
library(readxl)
iris = read_excel("iris data.xlsx")
iris
plot(x=iris$`sepal length`, y=iris$`sepal width`, main='Iris Plot', xlab='Sepal Length', ylab='Sepal Width', xlim=c(4,8), ylim=c(2,4.7))
source("D:/Data Science Program/Assignment 1.R")
setwd("D:Data Science Program")
#Exercise-1
data = read.csv("germination_csv.csv",header=TRUE)
# Q.1)
mean(data$germinated[data$Box=="Uncovered" & data$water_amt==4])
# Q.2)
median(data$germinated[data$Box=="Covered"])
# Q.3)
# a)
plot(data$water_amt, data$germinated, main="Germinated seeds vs Level of watering", xlab="Level of watering", ylab="Germinated seeds")
# b)
data$Box = factor(data$Box)
data$Box
plot(data$Box, data$germinated, main="Germinated seeds vs Covered or Uncovered", xlab="Box Types", ylab="Germinated seeds")
#Exercise-2
library(readxl)
wheat <- read_excel("wheat.xlsx")
wheat
wheat$State = factor(wheat$State)
plot(wheat$State, wheat$`2015 (Th. Tonnes)`, main="Wheat produced per State in 2015", xlab="States", ylab="Wheat produced")
plot(wheat$State, data$`2016 (th. Tonnes)`, main="Wheat produced per State in 2016", xlab="States", ylab="Wheat produced")
#Exercise-3
library(readxl)
iris = read_excel("iris data.xlsx")
iris
plot(x=iris$`sepal length`, y=iris$`sepal width`, main='Iris Plot', xlab='Sepal Length', ylab='Sepal Width', xlim=c(4,8), ylim=c(2,4.7))
#install.packages("ISLR")
#install.packages("caTools")
#install.packages("class")
library(ISLR)
library(caTools)
library(class)
?Smarket
df<-Smarket
View(df)
df = df[,2:9]
head(df)
str(df)
summary(df)
#scaling the input variables
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
set.seed(100)
split<-sample.split(df_scaled$Direction, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
ts_data<-subset(df_scaled,split == F)
#KNN
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3)
pred
head(pred)
ts_data$pred = pred
View(ts_data)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
#performance of knn
acc_knn<-sum(diag(con_matrix_knn))/sum(con_matrix_knn)
print(acc_knn)
sens_knn<-sum(con_matrix_knn[1,1])/sum(con_matrix_knn[1,])
print(sens_knn)
specificity_knn<-sum(con_matrix_knn[1,1])/sum(con_matrix_knn[,1])
print(specificity_knn)
precision<-(con_matrix_knn[2,2])/sum(con_matrix_knn[,2])
print(precision)
cat("The accuracy of knn is : ",acc_knn)
cat("The sensitivity of knn is : ",sens_knn)
cat("The specitivity of knn is : ",specificity_knn)
cat("The precision of knn is : ",precision)
library(ggplot2)
x = c(0.8, 1, 1.2, 0.8, 1.2, 4.3, 3.8, 4.8, 3.8, 4.2, 4.4, 4.4, 3.2, 3.2, 3.8, 3.5, 4, 4)
y = c(0.8, 1, 0.8, 1.2, 1.2, 2, 2.8, 2.8, 3.2, 3.2, 2.8, 3.2, 0.4, 0.7, 0.5, 1, 1, 0.7)
z = c(1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3)
dataset = data.frame(x,y,z)
head(dataset)
plot(dataset$x, dataset$y, col=c("red", "blue", "yellow", "green")[dataset$z])
qplot(x, y, color=factor(z), data = dataset) + scale_color_manual(values = c("yellow", "blue", "red", "green"))
test_pt = c(3,2)
for (i in 1:18) {
ed = sqrt((test_pt[2] - dataset[i,2])^2 + (test_pt[1] - dataset[i,1])^2)
dataset$dist_test_pt[i] = ed
}
minimum = min(dataset$dist_test_pt)
point_idx = which(dataset$dist_test_pt == minimum)
class = dataset[point_idx,3]
print(paste0("As test point", " is close to point ", point_idx, " with distance ", minimum, ". Therefore, test point belongs to class ", class))
?cars                #description of data set
str(cars)
summary(cars)
head(cars)
car_data <- cars
plot(car_data)
library('ggplot2')
g <- ggplot(aes(x=speed, y=dist), data=car_data)
g
g1 <- g + geom_point(col='red')
g1
df = data.frame(beta_0=seq(0,1,length.out=10),beta_1=seq(0,5,length.out=10))
df
#fit a line to data using abline function with randomly selected b0 & b1
for (i in 0:10) {
g1 = g1 + geom_abline(intercept = df$beta_0[i], slope = df$beta_1[i], col=i)
}
g1
#generate RSS (residual sum of squares) vector for each of the 10 lines generated above
RSS <- vector(mode='numeric')
for (i in 0:10) {
RSS[i] <- sum(((df$beta_1[i]*car_data$speed+df$beta_0[i]) - car_data$dist)**2)
}
RSS
df$RSS = RSS
head(df)
ggplot(aes(x=beta_0, y=RSS), data = df) + geom_point() + geom_line()
ggplot(aes(x=beta_1, y=RSS), data = df) + geom_point() + geom_line()
i = which(df$RSS == min(df$RSS))           #select index of row containing minimum RSS
min_beta = c(df$beta_0[i], df$beta_1[i])
min_beta
g2 = ggplot(aes(x=speed, y=dist), data=car_data) + geom_point(col='red') + geom_abline(intercept = min_beta[1], slope = min_beta[2], col='green')
g2
#fitting linear model using lm() function
l_model <- lm(dist~speed, data=car_data)
l_model                      #model coefficients
summary(l_model)             #residual : diff. betn predicted & actual data
car_data$y_pred = predict(l_model, data=car_data$speed)
View(car_data)
#plot the regression line using base plot function
plot(car_data$speed, car_data$dist, xlab = 'speed', ylab = 'Distance', main = 'Simple Linear Regression')
abline(l_model, col='blue', lwd=2)
#plot the regression line using ggplot2
ggplot(aes(x=speed, y=dist), data=car_data) + geom_point(col='red') +
geom_line(aes(car_data$`speed`, car_data$`y_pred`), col='green') +
ylab('Distance') + ggtitle('Simple Linear Regression')
setwd("D:Data Science Program")
#Exercise-1
data = read.csv("germination_csv.csv",header=TRUE)
# Q.1)
mean(data$germinated[data$Box=="Uncovered" & data$water_amt==4])
# Q.2)
median(data$germinated[data$Box=="Covered"])
# Q.3)
# a)
plot(data$water_amt, data$germinated, main="Germinated seeds vs Level of watering", xlab="Level of watering", ylab="Germinated seeds")
# b)
data$Box = factor(data$Box)
data$Box
plot(data$Box, data$germinated, main="Germinated seeds vs Covered or Uncovered", xlab="Box Types", ylab="Germinated seeds")
#Exercise-2
library(readxl)
wheat <- read_excel("wheat.xlsx")
wheat
wheat$State = factor(wheat$State)
plot(wheat$State, wheat$`2015 (Th. Tonnes)`, main="Wheat produced per State in 2015", xlab="States", ylab="Wheat produced")
plot(wheat$State, data$`2016 (th. Tonnes)`, main="Wheat produced per State in 2016", xlab="States", ylab="Wheat produced")
#Exercise-3
library(readxl)
iris = read_excel("iris data.xlsx")
iris
plot(x=iris$`sepal length`, y=iris$`sepal width`, main='Iris Plot', xlab='Sepal Length', ylab='Sepal Width', xlim=c(4,8), ylim=c(2,4.7))
setwd("D:Data Science Program")
#Exercise-1
data = read.csv("germination_csv.csv",header=TRUE)
# Q.1)
mean(data$germinated[data$Box=="Uncovered" & data$water_amt==4])
# Q.2)
median(data$germinated[data$Box=="Covered"])
# Q.3)
# a)
plot(data$water_amt, data$germinated, main="Germinated seeds vs Level of watering", xlab="Level of watering", ylab="Germinated seeds")
# b)
data$Box = factor(data$Box)
data$Box
plot(data$Box, data$germinated, main="Germinated seeds vs Covered or Uncovered", xlab="Box Types", ylab="Germinated seeds")
#Exercise-2
library(readxl)
wheat <- read_excel("wheat.xlsx")
wheat
wheat$State = factor(wheat$State)
plot(wheat$State, wheat$`2015 (Th. Tonnes)`, main="Wheat produced per State in 2015", xlab="States", ylab="Wheat produced")
plot(wheat$State, data$`2016 (th. Tonnes)`, main="Wheat produced per State in 2016", xlab="States", ylab="Wheat produced")
#Exercise-3
library(readxl)
iris = read_excel("iris data.xlsx")
iris
plot(x=iris$`sepal length`, y=iris$`sepal width`, main='Iris Plot', xlab='Sepal Length', ylab='Sepal Width', xlim=c(4,8), ylim=c(2,4.7))
#Exercise-1
setwd("D:Data Science Program")
library(readxl)
travel = read_excel("travelled abroad data.xlsx")
# Q.1)
p = length(travel$`Travelled abroad`[travel$`Travelled abroad`=="Y"])/nrow(travel) * 100
p
# Q.2)
x0<-dbinom(0,10,p/100)
x0
x1 <- dbinom(1,10,p/100)
x1
x2<-dbinom(2,10,p/100)
x2
x3<-dbinom(3,10,p/100)
x3
x4<-dbinom(4,10,p/100)
x4
x5<-dbinom(5,10,p/100)
x5
x6<-dbinom(6,10,p/100)
x6
x7<-dbinom(7,10,p/100)
x7
x8<-dbinom(8,10,p/100)
x8
x9<-dbinom(10,10,p/100)
x9
# Q.3)
x<-c(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9)
x<-signif(x,2)
x
barplot(x, names.arg=c(0,1,2,3,4,5,6,7,8,9), xlab='Number of people chosen for probability', ylab='Probabilties', main='Binomial distribution')
sum(dbinom(59:100,100,p/100))
#Exercise-2
setwd("D:Data Science Program")
hyp = read.csv("Hypothesis_csv1.csv", header=TRUE)
hyp
# Q.1)
mean = mean(hyp$Life_Hrs)
mean
std = sd(hyp$Life_Hrs)
std
# Q.2)
SE = std/sqrt(nrow(hyp))
SE
# Q.3)
Z = (mean - 10000)/SE
Z
# Q.4)
p = pnorm(Z)
p
# Q.5)
# The p-value 0.0305 is less than the level of significance of 0.05 (5%). We reject the null hypothesis, Hence the claim made by the manufacturer is rejected.
#  The p-value 0.0305 is greater than the level of significance of 0.01 (1%). We fail to reject the null hypothesis.
?cars                #description of data set
str(cars)
summary(cars)
head(cars)
car_data <- cars
plot(car_data)
library('ggplot2')
g <- ggplot(aes(x=speed, y=dist), data=car_data)
g
g1 <- g + geom_point(col='red')
g1
df = data.frame(beta_0=seq(0,1,length.out=10),beta_1=seq(0,5,length.out=10))
df
#fit a line to data using abline function with randomly selected b0 & b1
for (i in 0:10) {
g1 = g1 + geom_abline(intercept = df$beta_0[i], slope = df$beta_1[i], col=i)
}
g1
#generate RSS (residual sum of squares) vector for each of the 10 lines generated above
RSS <- vector(mode='numeric')
for (i in 0:10) {
RSS[i] <- sum(((df$beta_1[i]*car_data$speed+df$beta_0[i]) - car_data$dist)**2)
}
RSS
df$RSS = RSS
head(df)
ggplot(aes(x=beta_0, y=RSS), data = df) + geom_point() + geom_line()
ggplot(aes(x=beta_1, y=RSS), data = df) + geom_point() + geom_line()
i = which(df$RSS == min(df$RSS))           #select index of row containing minimum RSS
min_beta = c(df$beta_0[i], df$beta_1[i])
min_beta
g2 = ggplot(aes(x=speed, y=dist), data=car_data) + geom_point(col='red') + geom_abline(intercept = min_beta[1], slope = min_beta[2], col='green')
g2
#fitting linear model using lm() function
l_model <- lm(dist~speed, data=car_data)
l_model                      #model coefficients
summary(l_model)             #residual : diff. betn predicted & actual data
car_data$y_pred = predict(l_model, data=car_data$speed)
View(car_data)
#plot the regression line using base plot function
plot(car_data$speed, car_data$dist, xlab = 'speed', ylab = 'Distance', main = 'Simple Linear Regression')
abline(l_model, col='blue', lwd=2)
#plot the regression line using ggplot2
ggplot(aes(x=speed, y=dist), data=car_data) + geom_point(col='red') +
geom_line(aes(car_data$`speed`, car_data$`y_pred`), col='green') +
ylab('Distance') + ggtitle('Simple Linear Regression')
library(ggplot2)
x = c(0.8, 1, 1.2, 0.8, 1.2, 4.3, 3.8, 4.8, 3.8, 4.2, 4.4, 4.4, 3.2, 3.2, 3.8, 3.5, 4, 4)
y = c(0.8, 1, 0.8, 1.2, 1.2, 2, 2.8, 2.8, 3.2, 3.2, 2.8, 3.2, 0.4, 0.7, 0.5, 1, 1, 0.7)
z = c(1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3)
dataset = data.frame(x,y,z)
head(dataset)
plot(dataset$x, dataset$y, col=c("red", "blue", "yellow", "green")[dataset$z])
qplot(x, y, color=factor(z), data = dataset) + scale_color_manual(values = c("yellow", "blue", "red", "green"))
test_pt = c(3,2)
for (i in 1:18) {
ed = sqrt((test_pt[2] - dataset[i,2])^2 + (test_pt[1] - dataset[i,1])^2)
dataset$dist_test_pt[i] = ed
}
minimum = min(dataset$dist_test_pt)
point_idx = which(dataset$dist_test_pt == minimum)
class = dataset[point_idx,3]
print(paste0("As test point", " is close to point ", point_idx, " with distance ", minimum, ". Therefore, test point belongs to class ", class))
library(ISLR)
library(caTools)
library(class)
?Smarket
df<-Smarket
View(df)
df = df[,2:9]
head(df)
str(df)
summary(df)
#scaling the input variables
df_scaled = as.data.frame(scale(df[,1:7]))
df_scaled$Direction = df$Direction
head(df_scaled)
head(df)
set.seed(100)
split<-sample.split(df_scaled$Direction, SplitRatio = 0.7)
table(split)
tr_data<-subset(df_scaled,split == T)
ts_data<-subset(df_scaled,split == F)
#KNN
pred<-knn(tr_data[,1:7],ts_data[,1:7],tr_data$Direction, k = 3)
pred
head(pred)
ts_data$pred = pred
View(ts_data)
con_matrix_knn<-table(Actual = ts_data$Direction,predicted = pred)
print(con_matrix_knn)
#performance of knn
acc_knn<-sum(diag(con_matrix_knn))/sum(con_matrix_knn)
print(acc_knn)
sens_knn<-sum(con_matrix_knn[1,1])/sum(con_matrix_knn[1,])
print(sens_knn)
specificity_knn<-sum(con_matrix_knn[1,1])/sum(con_matrix_knn[,1])
print(specificity_knn)
precision<-(con_matrix_knn[2,2])/sum(con_matrix_knn[,2])
print(precision)
cat("The accuracy of knn is : ",acc_knn)
cat("The sensitivity of knn is : ",sens_knn)
cat("The specitivity of knn is : ",specificity_knn)
cat("The precision of knn is : ",precision)
